{"projectName":"CustomerService","totalTests":6,"passed":6,"failed":0,"skipped":0,"coveredLines":35,"missedLines":115,"coveragePercentage":23.33,"moduleStatus":[{"name":"RESTModuleDB","totalTests":3,"passed":3,"failed":0,"skipped":0,"tests":[{"name":"testAddCustomer","status":"PASSED"},{"name":"testGetCustomer","status":"PASSED"},{"name":"testUpdateCustomer","status":"PASSED"}]},{"name":"RESTModule","totalTests":3,"passed":3,"failed":0,"skipped":0,"tests":[{"name":"testAddCustomer","status":"PASSED"},{"name":"testGetCustomer","status":"PASSED"},{"name":"testUpdateCustomer","status":"PASSED"}]}],"moduleCoverage":[{"name":"RESTModuleDB","coveredLines":24,"missedLines":67,"coveragePercentage":26.37,"sourceFiles":[{"name":"main.bal","moduleName":"RESTModuleDB","coveredLines":[15,19,20,23,24,26,27,41,68,69,70,73,82,90,91,93,94,95,96,103,141,142,143,163],"missedLines":[30,31,32,34,35,36,37,39,43,45,46,47,48,51,52,53,57,58,60,61,62,66,75,77,78,80,85,89,99,100,101,129,130,134,135,136,139,146,147,150,152,153,154,155,158,160,161,162,165,167,168,169,170,173,174,175,180,181,186,187,193,194,197,198,199,201,204],"coveragePercentage":26.37,"sourceCode":"import ballerina/http;\nimport ballerina/\u0027log;\nimport ballerina/sql;\nimport ballerina/io;\nimport ballerina/java.jdbc;\nimport ballerina/lang.\u0027int as ints;\n\n\njdbc:Client customerDB \u003d check new (\"jdbc:mysql://localhost:3306/CustomerDB?serverTimezone\u003dUTC\", \"testuser\", \"1234\");\n\ntype Customer record {|\n    int Id;\n    string Name;\n    string Email;\n|};\n\nlistener http:Listener httpListenerDB \u003d new(9090);\n\n@http:ServiceConfig {\n    basePath: \"/data\"\n}\n\nservice CustomerService on httpListenerDB{\n    @http:ResourceConfig {\n\n        methods: [\"POST\"],\n        path: \"/customer\"\n    }\n\n    resource function addCustomer(http:Caller caller, http:Request req){\n        http:Response response \u003d new;\n        var payloadDBJson  \u003d req.getJsonPayload();\n\n        if(payloadDBJson is json){\n            Customer|error customerData \u003d payloadDBJson.cloneWithType(Customer);\n            log:printDebug(customerData.toString());\n            io:println(customerData.toString());\n\n            if(customerData is Customer){\n\n                sql:ParameterizedQuery insertQuery \u003d  `INSERT INTO CustomerDetails (Id,Name,Email) VALUES (${customerData.Id},${customerData.Name},${customerData.Email})`;\n\n                var result \u003d customerDB -\u003e execute(\u003c@untainted\u003einsertQuery);\n\n                if(result is sql:ExecutionResult){\n                    response.statusCode \u003d 201;\n                    json payload \u003d { status: \"Customer Added.\", customerId: customerData.Id };\n                    response.setPayload(\u003c@untainted\u003epayload);\n                }\n                else{\n                    response.statusCode \u003d 400;\n                    json payload \u003d { status: \"Customer Not Added.\", Error: result.toString() };\n                    response.setPayload(\u003c@untainted\u003epayload);\n                }\n            }\n            else{\n                response.statusCode \u003d 400;\n                response.setPayload(\"Error : Invalid Data\");\n            }\n            var result \u003d caller -\u003e respond(response);\n            if result is error {\n                log:printError(\"Error sending response\", err \u003d result);\n            }\n\n        }\n    }\n\n    @http:ResourceConfig {\n        methods: [\"GET\"],\n        path: \"/customer/{customerId}\"\n    }\n\n    resource function getcustomer (http:Caller httpCaller, http:Request request, string customerId) returns @untainted error?{\n        \n        http:Response response \u003d new;\n\n        var customerIdDB \u003d ints:fromString(customerId);\n        io:println(\"id : \", customerIdDB);\n\n        if customerIdDB is int{\n\n            sql:ParameterizedQuery getQuery \u003d `SELECT * FROM CustomerDetails WHERE Id \u003d ${customerIdDB}`;\n\n\n            stream\u003cCustomer, sql:Error\u003e resultStream \u003d \u003cstream\u003cCustomer, sql:Error\u003e\u003e customerDB -\u003e query(\u003c@untainted\u003egetQuery, Customer);\n\n            //stream\u003cCustomer, sql:Error\u003e customerStream \u003d \u003cstream\u003cCustomer, sql:Error\u003e\u003e result;\n\n            error? e \u003d resultStream.forEach(function(Customer cus) {\n                io:println(\"Customer : \", cus);\n                json|error retrivedCustomer \u003d cus.cloneWithType(json);\n\n                if(retrivedCustomer is json){\n                        response.statusCode \u003d 200;\n                        json payload \u003d { status: \"Customer Retrieved.\", customerData: retrivedCustomer };\n                        response.setPayload(\u003c@untainted\u003epayload);\n                    }\n                else{\n                    response.statusCode \u003d 400;\n                    json payload \u003d {Error : \"Invalid Data\", Message :  \u003c@untainted\u003eretrivedCustomer.toString()};\n                    response.setPayload(payload);\n                }    \n            });\n\n            // stream \u003crecord {}, error\u003e rs \u003d customerDB -\u003e query (`SELECT * FROM CustomerDetails WHERE Id \u003d ${\u003c@untainted\u003ecustomerIdDB}`);\n            // record {|record {} value;|}? entry \u003d check rs.next();\n            // io:println(\"entry : \", entry);\n\n            // if (entry is record {|record {} value;|}){\n            //     json|error cus \u003d entry.value.cloneWithType(json);\n            //     if (cus is error) {\n            //         io:println(\"Error : \", cus);\n            //         check httpCaller -\u003e notFound();\n            //         // response.statusCode \u003d 400;\n            //         // json payload \u003d {Error : \"Invalid Data\", Message :  \u003c@untainted\u003ecus.toString()};\n            //         // response.setPayload(payload);\n            //     }\n            //     else{\n            //         io:println(\"Error : \", cus);\n            //         check httpCaller -\u003e ok(\u003c@untainted\u003e cus);\n            //         // response.statusCode \u003d 200;\n            //         // json payload \u003d { status: \"Customer Retrieved.\", customerData: cus };\n            //         // response.setPayload(\u003c@untainted\u003epayload);\n            //     }\n            // }\n\n        }\n        else{\n            response.statusCode \u003d 400;\n            response.setPayload(\"Error: Customer Id is invalid\");\n            \n        }\n\n        var result \u003d httpCaller -\u003e respond(response);\n        if result is error {\n            log:printError(\"Error sending response\", err \u003d result);\n        }\n\n    }\n\n    @http:ResourceConfig {\n        methods: [\"PUT\"],\n        path: \"/customer\"\n    }\n\n    resource function updateCustomerDetails(http:Caller caller, http:Request req) {\n        http:Response response \u003d new;\n        \n\n        var payloadDBJson  \u003d req.getJsonPayload();\n\n        if(payloadDBJson is json){\n            Customer|error customerData \u003d payloadDBJson.cloneWithType(Customer);\n            log:printDebug(customerData.toString());\n            io:println(customerData.toString());\n\n\n            io:println(\"existingCustomer :\", customerData);\n\n            if (customerData is Customer){\n                int|error customerIdDB \u003d customerData.Id;\n                if customerIdDB is int {\n                    sql:ParameterizedQuery updateQuery \u003d  `UPDATE CustomerDetails SET Name \u003d ${customerData.Name}, Email \u003d ${customerData.Email} WHERE Id \u003d ${customerIdDB}`;\n\n                    var result \u003d customerDB-\u003eexecute(\u003c@untainted\u003eupdateQuery);\n\n                    if (result is sql:ExecutionResult){\n                        response.statusCode \u003d 200;\n                        json payload \u003d { status: \"Customer Updated.\", customerId: customerData.Id };\n                        response.setPayload(\u003c@untainted\u003epayload);\n                    }\n                    else{\n                        response.statusCode \u003d 400;\n                        json payload \u003d { status: \"Customer Updated.\", customerId: customerData.Id };\n                        response.setPayload(\u003c@untainted\u003epayload);\n                    }\n\n                }\n                else{\n                    response.statusCode \u003d 400;\n                    response.setPayload(\"Error: Invalid customer ID\");\n                }\n\n            }\n            else{\n                response.statusCode \u003d 400;\n                response.setPayload(\"Error : Invalid Customer Data\");\n            }\n\n            \n        }\n        else {\n            response.statusCode \u003d 400;\n            response.setPayload(\"Error: Invalid payload received\");\n        }\n\n        var result \u003d caller -\u003e respond(response);\n        if result is error {\n            log:printError(\"Error sending response\", err \u003d result);\n        }\n    }\n\n\n}\n"}]},{"name":"RESTModule","coveredLines":11,"missedLines":48,"coveragePercentage":18.64,"sourceFiles":[{"name":"main.bal","moduleName":"RESTModule","coveredLines":[9,11,13,15,16,56,57,58,78,79,80],"missedLines":[19,20,21,22,24,25,27,28,32,36,38,39,40,42,46,47,50,51,52,54,61,62,63,65,66,69,70,72,73,76,83,85,86,87,89,90,92,93,96,97,99,102,103,106,107,108,110,111],"coveragePercentage":18.64,"sourceCode":"import ballerina/log;\nimport ballerina/http;\n\n\nlistener http:Listener httpListener \u003d new (9090);\n\nmap\u003cjson\u003e customerDataMap \u003d {};\n\n@http:ServiceConfig {basePath: \"/\"}\n\nservice customerDataManagement on httpListener{\n\n    @http:ResourceConfig {\n\n        methods: [\"POST\"],\n        path: \"/customer\"\n    }\n\n    resource function addCustomer (http:Caller caller, http:Request req){\n        http:Response response \u003d new;\n        var customerDetailsReq \u003d req.getJsonPayload();\n        log:printInfo(customerDetailsReq.toString());\n\n        if(customerDetailsReq is json){\n            json|error customerIdReq \u003d customerDetailsReq.Customer.Id;\n            \n            if customerIdReq is error{\n                log:printError(\"Unable to add customer\");\n            }\n            else{\n                \n                string customerId \u003d customerIdReq.toString();\n\n                //log:printDebug(\"customerId : \" + customerId);\n\n                customerDataMap[customerId] \u003d \u003c@untainted\u003e customerDetailsReq;\n\n                json payload \u003d { status: \"Customer Added.\", customerId: customerId };\n                response.setJsonPayload(\u003c@untainted\u003epayload);\n                response.statusCode \u003d 201;\n\n                response.setHeader(\"Location\",\"http://localhost:9090/customerDataManagement/\" + customerId);\n            }\n        }\n        else {\n            response.statusCode \u003d 400;\n            response.setPayload(\"Invalid payload received\");\n        }\n\n        var result \u003d caller -\u003e respond(response);\n        if result is error {\n            log:printError(\"Error sending response\", err \u003d result);\n        }\n    }\n\n    @http:ResourceConfig {\n        methods: [\"GET\"],\n        path: \"/customer/{customerId}\"\n    }\n\n    resource function getCustomerDetails (http:Caller caller, http:Request req, string customerId){\n        json payload \u003d customerDataMap[customerId];\n        http: Response response \u003d new;\n\n        if(payload \u003d\u003d null){\n            payload \u003d \"Customer : \" + customerId + \" cannot be found !\";\n        }\n\n        response.setJsonPayload(\u003c@untainted\u003e payload);\n        var result \u003d caller -\u003e respond(response);\n\n        if result is error{\n            log:printError(\"Error sending response\",err\u003dresult);\n        }\n\n    }\n\n    @http:ResourceConfig {\n            methods: [\"PUT\"],\n            path: \"/customer/{customerId}\"\n        }\n\n    resource function updateCustomerDetails(http:Caller caller, http:Request req, string customerId) {\n\n        http:Response response \u003d new;\n        var customerDetailsReq \u003d req.getJsonPayload();\n        log:printInfo(customerDetailsReq.toString());\n\n        if(customerDetailsReq is json){\n            json existingCustomer \u003d customerDataMap[customerId];\n            \n            if (existingCustomer \u003d\u003d null){\n                existingCustomer \u003d \"Customer : \" + customerId + \" cannot be found !\";\n            }\n            else{\n                customerDataMap[customerId] \u003d \u003c@untainted\u003e customerDetailsReq;\n                existingCustomer \u003d customerDetailsReq;\n            }\n            response.setJsonPayload(\u003c@untainted\u003e existingCustomer);\n        }\n        else {\n            response.statusCode \u003d 400;\n            response.setPayload(\"Invalid payload received\");\n        }\n\n        var result \u003d caller -\u003e respond(response);\n        if result is error {\n            log:printError(\"Error sending response\", err \u003d result);\n        }\n    }\n}\n"}]}]}